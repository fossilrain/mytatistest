<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <!-- namespace命名空间，对sql进行分类化管理，实现sql隔离
 注意：使用mapper代理开发时，namespace将有特殊重要的意义
  -->
<mapper namespace="com.rf.m.mapper.ItemMapper">
	<!-- 定义resultMap
	将SELECT id id_,NAME name_,detail detail_ FROM item 和Item类中的属性做一个映射关系
	type： resultMap最终映射的java对象类型，可以使用别名
	id：resultMap的唯一标示
	 -->
	<resultMap type="item" id="itemResultMap">
		<!-- id表示查询结果集中唯一标识
		column:查询出来的列名
		property:type指定的pojo类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		 -->
		<id column="id_" property="id"/>
		<!-- result 对普通列映射
		column:查询出来的列名
		property:type指定的pojo类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		 -->
		<result column="name_" property="name"/>
		<result column="detail_" property="detail"/>
	</resultMap>

	<!-- 定义sql片段
	id:sql片段的唯一标识
	
	经验：是基于单表来定义sql片段，这样sql片段可重用性才高
	在sql片段中不要包含where
	 -->
	<sql id="query_item_where">
		<if test="itemCustom != null">
			<if test="itemCustom.name != null and itemCustom.name != ''">
				AND NAME LIKE '%${itemCustom.name}%'
			</if>
			<if test="itemCustom.detail != null and itemCustom.detail != ''">
				AND detail LIKE '%${itemCustom.detail}%'
			</if>
			<if test="ids != null">
				<!-- 使用foreach遍历循环ids
				collections：指定输入对象中集合属性
				item：每个遍历到的元素
				open：开始遍历时拼接的串
				close：结束遍历时拼接的串
				separator：遍历的两个对象间需要拼接的串
				 -->
				<foreach collection="ids" item="item_id" open="and id in (" close=")" separator=",">
					<!-- 每个遍历需要拼接的串 -->
					#{item_id}
				</foreach>
			</if>
		</if>
	</sql>

	<!-- parameterType 输入参数类型 -->
	<select id="queryItemById" parameterType="int" resultType="item">
		SELECT * FROM item WHERE id=#{id}
	</select>
	<!-- 使用resultMap 进行输出映射
	resultMap指定定义的resultMap的id，如果这个resultMap在其它的mapper.xml中，前边需要加namespace
	-->
	<select id="queryItemByIdResultMap" parameterType="int" resultMap="itemResultMap">
		SELECT id id_,NAME name_,detail detail_ FROM item WHERE id=#{id}
	</select>
	<!-- 商品信息综合查询 -->
	<select id="findItemList" parameterType="itemQueryVo" resultType="itemCustom">
		SELECT * FROM item
		<!-- where可以自动去掉条件中的第一个and -->
		<where>
			<!-- <if test="itemCustom != null">
				<if test="itemCustom.name != null and itemCustom.name != ''">
					AND NAME LIKE '%${itemCustom.name}%'
				</if>
				<if test="itemCustom.detail != null and itemCustom.detail != ''">
					AND detail LIKE '%${itemCustom.detail}%'
				</if>
			</if> -->
			<!-- 替换为引用sql片段 
			refid:引用的sql片段的id，如果refid指定的id不在本mapper文件中，需要前边加namespace
			-->
			<include refid="query_item_where"></include>
			<!-- 在这里还要引用其它的sql片段 -->
		</where>
	</select>
	<!-- 商品信息综合查询 总数-->
	<select id="findItemCount" parameterType="itemQueryVo" resultType="int">
		SELECT count(*) FROM item
		<!-- where可以自动去掉条件中的第一个and -->
		<where>
			<include refid="query_item_where"></include>
		</where>
	</select>
</mapper>